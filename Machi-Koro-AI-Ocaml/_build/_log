### Starting build.
# Target: main.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules main.mli > main.mli.depends # cached
# Target: establishment.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:establishment.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules establishment.mli > establishment.mli.depends # cached
# Target: establishment.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:establishment.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o establishment.cmi establishment.mli # cached
# Target: landmark.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:landmark.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules landmark.mli > landmark.mli.depends # cached
# Target: landmark.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:landmark.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o landmark.cmi landmark.mli # cached
# Target: state.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules state.mli > state.mli.depends # cached
# Target: dice.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:dice.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules dice.mli > dice.mli.depends # cached
# Target: dice.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:dice.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o dice.cmi dice.mli # cached
# Target: player.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:player.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules player.mli > player.mli.depends # cached
# Target: player.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:player.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o player.cmi player.mli # cached
# Target: state.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o state.cmi state.mli # cached
# Target: main.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o main.cmi main.mli # cached
# Target: main.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules main.ml > main.ml.depends # cached
# Target: basiccards.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:basiccards.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules basiccards.mli > basiccards.mli.depends # cached
# Target: basiccards.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:basiccards.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o basiccards.cmi basiccards.mli # cached
# Target: card_maker.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:card_maker.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules card_maker.mli > card_maker.mli.depends # cached
# Target: card_maker.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:card_maker.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o card_maker.cmi card_maker.mli # cached
# Target: load_from_json.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:load_from_json.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules load_from_json.mli > load_from_json.mli.depends # cached
# Target: load_from_json.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:load_from_json.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o load_from_json.cmi load_from_json.mli # cached
# Target: parse_json.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:parse_json.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules parse_json.mli > parse_json.mli.depends # cached
# Target: parse_json.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:parse_json.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o parse_json.cmi parse_json.mli # cached
# Target: save_to_json.mli.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:mli, file:save_to_json.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules save_to_json.mli > save_to_json.mli.depends # cached
# Target: save_to_json.cmi, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:mli, file:save_to_json.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o save_to_json.cmi save_to_json.mli # cached
# Target: main.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o main.cmo main.ml # cached
# Target: basiccards.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:basiccards.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules basiccards.ml > basiccards.ml.depends # cached
# Target: basiccards.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:basiccards.cmo, file:basiccards.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o basiccards.cmo basiccards.ml # cached
# Target: card_maker.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:card_maker.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules card_maker.ml > card_maker.ml.depends # cached
# Target: card_maker.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:card_maker.cmo, file:card_maker.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o card_maker.cmo card_maker.ml # cached
# Target: establishment.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:establishment.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules establishment.ml > establishment.ml.depends # cached
# Target: establishment.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:establishment.cmo, file:establishment.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o establishment.cmo establishment.ml # cached
# Target: landmark.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:landmark.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules landmark.ml > landmark.ml.depends # cached
# Target: landmark.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:landmark.cmo, file:landmark.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o landmark.cmo landmark.ml # cached
# Target: load_from_json.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:load_from_json.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules load_from_json.ml > load_from_json.ml.depends # cached
# Target: load_from_json.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:load_from_json.cmo, file:load_from_json.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o load_from_json.cmo load_from_json.ml # cached
# Target: parse_json.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:parse_json.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules parse_json.ml > parse_json.ml.depends # cached
# Target: parse_json.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:parse_json.cmo, file:parse_json.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o parse_json.cmo parse_json.ml # cached
# Target: player.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:player.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules player.ml > player.ml.depends # cached
# Target: player.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:player.cmo, file:player.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o player.cmo player.ml # cached
# Target: save_to_json.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:save_to_json.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules save_to_json.ml > save_to_json.ml.depends # cached
# Target: save_to_json.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:save_to_json.cmo, file:save_to_json.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o save_to_json.cmo save_to_json.ml # cached
# Target: state.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules state.ml > state.ml.depends # cached
# Target: state.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o state.cmo state.ml # cached
# Target: dice.ml.depends, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), extension:ml, file:dice.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -modules dice.ml > dice.ml.depends # cached
# Target: dice.cmo, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, compile, extension:cmo, extension:ml, file:dice.cmo, file:dice.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o -o dice.cmo dice.ml # cached
# Target: main.byte, tags: { package(ANSITerminal), package(bisect), package(oUnit), package(qcheck), package(str), package(unix), package(yojson), syntax(camlp4o), byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package unix -package oUnit -package str -package qcheck -package ANSITerminal -package bisect -package yojson -syntax camlp4o establishment.cmo landmark.cmo parse_json.cmo basiccards.cmo dice.cmo player.cmo state.cmo save_to_json.cmo card_maker.cmo load_from_json.cmo main.cmo -o main.byte # cached
# Compilation successful.
